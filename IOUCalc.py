GT0 = [[35.0, 42.0, 28.0, 24.0],
      [13.3333, 14.3333, 52.75, 52.25],
      [12.33333, 13.33333, 51.75, 51.25],
      [95.99988, 97.5002, 21.00021, 19.99977],
      [-90.240169, -87.663772, 14.539767, 13.126664],
      [-96.60281029865446,-96.59826467758317,33.64213837817811,33.637663330009644],
      [-96.39739674565065,-96.39367175729356,33.51622300635808,33.51245144377557],
      [-96.9409425395099,-96.93664739360429,30.185371751515195,30.180760709131786],
      [-99.96235217654142,-99.95067203535332,31.749381657839155,31.73934213139023],
      [-94.11143715835705,-94.10786353848977,30.09129654203185,30.087584289066214]]

ModelPred0 = [[36, 42, 28, 24],
             [12.9, 14.4, 52.7, 52.0],
             [12.0, 13.0, 51.75, 51.25],
             [95.5, 96.5, 21.5, 20.5],
             [-90.128, -87.691, 14.445, 13.144],
             [-96.6110, -96.5990, 33.6380, 33.6320],
             [-96.3953, -96.3886, 33.5141, 33.5106],
             [-96.9410, -96.9350, 30.1840, 30.1800],
             [0,0,0,0],
             [0,0,0,0]]

GT1 = [[35.0, 42.0, 28.0, 24.0],
       [13.3333, 14.3333, 52.75, 52.25],
       [12.33333, 13.33333, 51.75, 51.25],
       [95.99988, 97.5002, 21.00021, 19.99977],
       [-96.60281029865446,-96.59826467758317,33.64213837817811,33.637663330009644],
       [-96.39739674565065,-96.39367175729356,33.51622300635808,33.51245144377557],
       [-96.9409425395099,-96.93664739360429,30.185371751515195,30.180760709131786],
       [-99.96235217654142,-99.95067203535332,31.749381657839155,31.73934213139023],
       [-94.11143715835705,-94.10786353848977,30.09129654203185,30.087584289066214],
       [-90.240169, -87.663772, 14.539767, 13.126664]]

ModelPred1 = [[37, 41, 28,24],
              [13.00, 14.30, 52.70, 52.10],
              [11.7, 13.0, 51.8, 51.0],
              [95.5, 96.5,21.5, 20.5],
              [-96.6130, -96.6060, 33.6405, 33.6345],
              [-96.3989, -96.3943, 33.5133, 33.5099],
              [-96.9438, -96.9370, 30.1838, 30.1810],
              [-102.792, -102.782, 46.885, 46.880],
              [-125, -66, 49, 25],
              [-90.15, -87.69, 14.45, 13.05]]

GT2 = [[35.0, 42.0, 28.0, 24.0],
       [13.3333, 14.3333, 52.75, 52.25],
       [12.33333, 13.33333, 51.75, 51.25],
       [95.99988, 97.5002, 21.00021, 19.99977],
       [-96.60281029865446,-96.59826467758317,33.64213837817811,33.637663330009644],
       [-96.39739674565065,-96.39367175729356,33.51622300635808,33.51245144377557],
       [-96.9409425395099,-96.93664739360429,30.185371751515195,30.180760709131786],
       [-99.96235217654142,-99.95067203535332,31.749381657839155,31.73934213139023],
       [-94.11143715835705,-94.10786353848977,30.09129654203185,30.087584289066214],
       [-90.240169, -87.663772, 14.539767, 13.126664]]

ModelPred2 = [[36, 40, 28, 24],
              [12.9, 14.3, 53.0, 52.0],
              [11.8,13.1, 51.7, 51.0],
              [95.5, 97.0, 22.5, 20.5],
              [-96.6140, -96.6100, 33.6370, 33.6330],
              [-96.399, -96.389, 33.515, 33.508],
              [-96.940, -96.935, 30.184, 30.179],
              [-102.794, -102.788, 46.885, 46.881],
              [-99.5071, -99.5065, 27.5071, 27.5065],
              [-90.13, -87.69, 14.45, 13.16]]

#box[0] = left, box[1] = right, box[2] = top, box[3] = bottom 
def compute_iou(box1, box2):
    # Calculate intersection area
    intersection_width = min(box1[1], box2[1]) - max(box1[0], box2[0])
    intersection_height = min(box1[2], box2[2]) - max(box1[3], box2[3])
    
    if intersection_width <= 0 or intersection_height <= 0:
        return 0
    
    intersection_area = intersection_width * intersection_height

    # Calculate union area
    box1_area = (box1[1] - box1[0]) * (box1[2] - box1[3])
    box2_area = (box2[1] - box2[0]) * (box2[2] - box2[3])
    
    union_area = box1_area + box2_area - intersection_area

    # Calculate IoU
    iou = intersection_area / union_area
    return iou

def computeAll(GT, ModelPred, Testname):
    print(Testname)
    sum = 0
    for i in range(0, len(GT)):
        val = compute_iou(GT[i], ModelPred[i])
        print(GT[i], ModelPred[i], val)
        sum+=val
    print("Average IOU: " + str(sum/len(GT)))

computeAll(GT0, ModelPred0, "Test0")
computeAll(GT1, ModelPred1, "Test1")
computeAll(GT2, ModelPred2, "Test2")